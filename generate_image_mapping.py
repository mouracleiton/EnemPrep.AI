#!/usr/bin/env python3
"""
Script to generate a mapping file for all images in the img folder.
This will create a file that maps image filenames to require statements.
"""

import os
import re

# Path to the img folder
IMG_DIR = "EnemPrepAppExpo/assets/img"
# Output file
OUTPUT_FILE = "EnemPrepAppExpo/src/utils/QuestionImageMapping.ts"

def sanitize_var_name(filename):
    """Convert a filename to a valid JavaScript variable name."""
    # Remove file extension
    name = os.path.splitext(filename)[0]
    # Replace invalid characters with underscore
    name = re.sub(r'[^a-zA-Z0-9_]', '_', name)
    # Ensure it starts with a letter or underscore
    if not name[0].isalpha() and name[0] != '_':
        name = 'img_' + name
    return name

def generate_mapping():
    """Generate the mapping file."""
    if not os.path.exists(IMG_DIR):
        print(f"Error: Directory {IMG_DIR} does not exist.")
        return False

    # Get all PNG files in the img directory (case-insensitive)
    png_files = [f for f in os.listdir(IMG_DIR) if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]

    if not png_files:
        print(f"No PNG files found in {IMG_DIR}.")
        return False

    # Create the output directory if it doesn't exist
    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)

    # Generate the TypeScript file content
    content = [
        "/**",
        " * This file is auto-generated by generate_image_mapping.py",
        " * Do not edit this file manually.",
        " */",
        "",
        "// Map of image filenames to require statements",
        "const imageMapping: Record<string, any> = {",
    ]

    # Add each image to the mapping
    for png_file in png_files:
        # We don't need the sanitized variable name anymore
        content.append(f"  '{png_file}': require('../../assets/img/{png_file}'),")

    content.extend([
        "};",
        "",
        "/**",
        " * Get the image source for a given filename",
        " * @param filename The image filename",
        " * @returns The image source",
        " */",
        "export function getQuestionImage(filename: string | null) {",
        "  if (!filename) return null;",
        "  ",
        "  // Extract just the filename without path",
        "  const baseFilename = filename.split('/').pop();",
        "  if (!baseFilename) return null;",
        "  ",
        "  // First try exact match",
        "  if (imageMapping[baseFilename]) {",
        "    return imageMapping[baseFilename];",
        "  }",
        "  ",
        "  // If not found, try case-insensitive match",
        "  const lowerFilename = baseFilename.toLowerCase();",
        "  const keys = Object.keys(imageMapping);",
        "  for (const key of keys) {",
        "    if (key.toLowerCase() === lowerFilename) {",
        "      return imageMapping[key];",
        "    }",
        "  }",
        "  ",
        "  // Not found",
        "  return null;",
        "}",
        "",
        "export default imageMapping;",
        ""
    ])

    # Write the file
    with open(OUTPUT_FILE, 'w') as f:
        f.write('\n'.join(content))

    print(f"âœ… Successfully created {OUTPUT_FILE} with {len(png_files)} image mappings.")
    return True

if __name__ == "__main__":
    if generate_mapping():
        print("Image mapping generation complete!")
    else:
        print("Failed to generate image mapping.")
